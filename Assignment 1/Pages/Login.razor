@page "/login"

@using Assignment_1.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <form>
            <div>
                <br /><br /><br /><br /><br />
            </div>
            <div>
                <h3 style="font-weight:bold; color:purple">Log into your account</h3>
            </div>
            <div>
                <br />
            </div>
            <div class="col-12 row">
                <input class="form-control col-12" @bind="username" placeholder="username" />
            </div>
            <br />
            <div class="col-12 row">
                <input type="password" class="form-control col-12" @bind="password" placeholder="password" />
            </div>
            <br />
            <div class="col-12 row" style="text-align:left; font-weight:bold">
                <span class="col-12" style="color:red">@errorMessage</span>
            </div>
            <br />
            <div class="col-12 row">
                <span class="col-12"></span>
                <input type="submit" class="form-control col-6 btn btn-primary" value="Log in" @onclick="PerformLogin" />
            </div>
        </form>
    </NotAuthorized>
    <Authorized>
        <div class="col-12 row">
            <span class="col-12"></span>
            <input type="submit" class="form-control col-6 btn btn-primary" value="Log out" @onclick="PerformLogout" />
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin() {
        errorMessage = "";
        try {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLoginAsync(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/");
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }

}